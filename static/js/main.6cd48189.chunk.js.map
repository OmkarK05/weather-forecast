{"version":3,"sources":["Components/City&Date/CityandDate.module.css","Components/WeatherConditions/WeatherData.module.css","Components/FetchApi/FetchApi.js","Redux/Api/ApiTypes.js","Redux/Api/Actions.js","Context/context.js","Redux/Api/ApiReducer.js","Redux/rootReducer.js","Redux/store.js","Components/SelectCity/SelectCity.js","Components/City&Date/CityandDate.js","Components/WeatherConditions/WeatherData.js","App.js","FirebaseConfig/config.js","index.js","Components/SelectCity/SelectCity.module.css"],"names":["module","exports","FetchApi","city","useSelector","state","apiData","selectedCity","loader","data","console","log","dispatch","useDispatch","useEffect","type","Axios","get","then","payload","getDataSuccess","catch","error","getDataFailure","fetchData","createContext","initialState","cities","ApiReducer","action","RootReducer","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","logger","thunk","SelectCity","className","styles","top","head","selectCity","onChange","e","preventDefault","target","value","cityHandler","Object","entries","map","key","CityandDate","props","d","Date","day","getDay","date","getDate","year","getFullYear","month","getMonth","WeatherData","weactherData","weatherCard","tempContainer","tempCon","clouds","weather","description","temp","main","subTemp","min","temp_min","temp_max","humAirWind","humidity","pressure","wind","speed","deg","tempType","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","database","ref","on","snapshot","val","err","getData","ReactDOM","hydrate","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6cd48189.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"city\":\"CityandDate_city__EFFN0\",\"date\":\"CityandDate_date__3oZUC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherCard\":\"WeatherData_weatherCard__jBhH3\",\"tempContainer\":\"WeatherData_tempContainer__Br36c\",\"city\":\"WeatherData_city__pXj78\",\"temp\":\"WeatherData_temp__2o5Ql\",\"clouds\":\"WeatherData_clouds__3n61y\",\"tempCon\":\"WeatherData_tempCon__14Qbr\",\"subTemp\":\"WeatherData_subTemp__3M1PY\",\"min\":\"WeatherData_min__1qXNw\",\"humAirWind\":\"WeatherData_humAirWind__3cFbf\",\"tempType\":\"WeatherData_tempType__1zqP1\"};","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchData,\n  getDataSuccess,\n  getDataFailure,\n  setLoader,\n} from \"../../Redux\";\n\nconst FetchApi = () => {\n  const city = useSelector((state) => state.apiData.selectedCity);\n  const data = useSelector((state) => state.apiData.data);\n  const loader = useSelector((state) => state.apiData.loader);\n  console.log(loader);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchData(city));\n  }, [dispatch, city]);\n\n  return <div>{loader ? <h1>Loading...</h1> : null}</div>;\n};\n\nexport default FetchApi;\n\n// import React, { useEffect, useState, useContext } from \"react\";\n// import Axios from \"axios\";\n// import firebase from \"firebase/app\";\n// import { weatherContext } from \"../../Context/context\";\n// import { SET_DATA } from \"../../Context/actionTypes\";\n\n// const FetchApi = (props) => {\n//   const [data, setData] = useState({});\n//   const { state, dispatch } = useContext(weatherContext);\n\n//   useEffect(() => {\n//     const fetchApiData = async () => {\n//       if (state.city !== \" \" || null) {\n//         try {\n//           await Axios.get(\n//             `http://api.openweathermap.org/data/2.5/weather?q=${state.city},mh,in&appid=e85f12ec97bc367ae2d3cec2c693d22e`\n//           )\n//             .then(({ data }) => {\n//               dispatch({\n//                 type: SET_DATA,\n//                 payload: data,\n//               });\n//             })\n//             .catch((err) => console.log(err));\n//         } catch (err) {\n//           console.log(err);\n//         }\n//       }\n//     };\n//     fetchApiData();\n//   });\n//   return <div></div>;\n// };\n\n// export default FetchApi;\n","import {\n  GET_DATA_FALIURE,\n  GET_DATA_SUCCESS,\n  SET_LOADER,\n  SELECT_CITY,\n  GET_CITIES,\n} from \"./Actions\";\nimport Axios from \"axios\";\n\nexport const getDataSuccess = (data) => {\n  return {\n    type: GET_DATA_SUCCESS,\n    payload: data,\n  };\n};\nexport const getDataFailure = (error) => {\n  return {\n    type: GET_DATA_FALIURE,\n    payload: error,\n  };\n};\nexport const setLoader = () => {\n  return {\n    type: SET_LOADER,\n  };\n};\n\nexport const setCity = (city) => {\n  return {\n    type: SELECT_CITY,\n    payload: city,\n  };\n};\n\nexport const getCities = (cities) => {\n  return {\n    type: GET_CITIES,\n    payload: cities,\n  };\n};\n\nexport const fetchData = (city) => {\n  return (dispatch) => {\n    dispatch(setLoader());\n    Axios.get(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},mh,in&appid=e85f12ec97bc367ae2d3cec2c693d22e`\n    )\n      .then(({ data }) => dispatch(getDataSuccess(data)))\n      .catch((error) => dispatch(getDataFailure(error)));\n  };\n};\n","export const GET_DATA_FALIURE = \"GET_DATA\";\nexport const GET_DATA_SUCCESS = \"GET_DATA_SUCCESS\";\nexport const SET_LOADER = \"SET_LOADER\";\nexport const SELECT_CITY = \"SELECT_CITY\";\nexport const GET_CITIES = \"GET_CITIES\";\n","import { createContext } from \"react\";\n\nexport const weatherContext = createContext();\n","import {\n  GET_DATA_SUCCESS,\n  GET_DATA_FALIURE,\n  SET_LOADER,\n  SELECT_CITY,\n  GET_CITIES,\n} from \"./Actions\";\n\nconst initialState = {\n  data: null,\n  error: \"\",\n  loader: false,\n  cities: [],\n  selectedCity: \"\",\n};\n\nconst ApiReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_DATA_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        loader: false,\n      };\n    case GET_DATA_FALIURE:\n      return {\n        ...state,\n        error: action.payload,\n        loader: false,\n      };\n    case SET_LOADER:\n      return {\n        ...state,\n        loader: true,\n      };\n    case SELECT_CITY:\n      return {\n        ...state,\n        selectedCity: action.payload,\n      };\n    case GET_CITIES:\n      return {\n        ...state,\n        cities: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\nexport default ApiReducer;\n","import { combineReducers } from \"redux\";\nimport ApiReducer from \"./Api/ApiReducer\";\n\nconst RootReducer = combineReducers({ apiData: ApiReducer });\n\nexport default RootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootReducer from \"./rootReducer\";\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(logger, thunk))\n);\n","import React, { useContext, useState } from \"react\";\nimport { weatherContext } from \"../../Context/context\";\nimport { SELECT_CITY } from \"../../Context/actionTypes\";\nimport styles from \"./SelectCity.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { store } from \"../../Redux/store\";\nimport { setCity } from \"../../Redux/Api/ApiTypes\";\n\nfunction SelectCity() {\n  const dispatch = useDispatch();\n  const cities = useSelector((state) => state.apiData.cities);\n  console.log(cities);\n  const cityHandler = (e) => {\n    e.preventDefault();\n    dispatch(setCity(e.target.value));\n  };\n\n  return (\n    <div className={styles.top}>\n      <p className={styles.head}>Weather Forecast</p>\n      <select className={styles.selectCity} onChange={(e) => cityHandler(e)}>\n        <option>Select City</option>\n        {Object.entries(cities).map(([key, value]) => (\n          <option value={key}>{value}</option>\n        ))}\n      </select>\n    </div>\n  );\n}\nexport default SelectCity;\n\n//   const { state, dispatch } = useContext(weatherContext);\n\n//\n\n//   return (\n//     <div className={styles.top}>\n//       <p className={styles.head}>Weather Forecast</p>\n//       <select className={styles.selectCity} onChange={(e) => cityHandler(e)}>\n//         <option>Select City</option>\n//         {Object.entries(state.Cities).map(([key, value]) => (\n//           <option value={key}>{value}</option>\n//         ))}\n//       </select>\n//     </div>\n//   );\n// }\n","import React, { useContext } from \"react\";\nimport styles from \"./CityandDate.module.css\";\nimport { weatherContext } from \"../../Context/context\";\nimport { useSelector } from \"react-redux\";\n\nfunction CityandDate(props) {\n  const city = useSelector((state) => state.apiData.selectedCity);\n  let days = [\n    \"Sunday\",\n\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thrusday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  let months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  let d = new Date();\n  let day = d.getDay();\n  let date = d.getDate();\n  let year = d.getFullYear();\n  let month = d.getMonth();\n  console.log(day);\n  return (\n    <div>\n      <p className={styles.city}>{city}</p>\n      <p className={styles.date}>\n        {` ${days[day]}\n        ${date}\n        ${months[month]}\n        ${year}`}\n      </p>\n    </div>\n  );\n}\n\nexport default CityandDate;\n","import React, { useContext, useState, Fragment } from \"react\";\nimport styles from \"./WeatherData.module.css\";\nimport { weatherContext } from \"../../Context/context\";\nimport { useSelector } from \"react-redux\";\n\nconst WeatherData = () => {\n  const weactherData = useSelector((state) => state.apiData.data);\n  console.log(weactherData);\n  return (\n    <div className={styles.weatherCard}>\n      {weactherData !== null ? (\n        <Fragment>\n          <div className={styles.tempContainer}>\n            <div className={styles.tempCon}>\n              <p className={styles.clouds}>\n                {weactherData.weather[0].description}\n              </p>\n              <p className={styles.temp}>\n                {weactherData.main.temp}\n                <sup>o</sup>\n              </p>\n            </div>\n            <div className={styles.subTemp}>\n              <div className={styles.min}>\n                <p>Min/Max</p>\n                <p>\n                  {weactherData.main.temp_min} <sup>o</sup> /{\" \"}\n                  {weactherData.main.temp_max}\n                  <sup>o</sup>\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className={styles.humAirWind}>\n            <p>Humidity : {weactherData.main.humidity} %</p>\n            <p>Air Pressure : {weactherData.main.pressure} mb</p>\n            <p>Wind speed : {weactherData.wind.speed}</p>\n            <p>\n              Wind direction : {weactherData.wind.deg}\n              <sup>o</sup>\n            </p>\n          </div>\n          <div className={styles.tempType}>\n            <span>Temperature type: </span>\n            <span>\n              <button>\n                <sup>o</sup>C\n              </button>\n            </span>\n            <button>\n              <sup>o</sup>K\n            </button>\n            <button>\n              <sup>o</sup>F\n            </button>\n          </div>\n        </Fragment>\n      ) : null}\n    </div>\n  );\n};\n\nexport default WeatherData;\n","import React, { useReducer, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport FetchApi from \"./Components/FetchApi/FetchApi\";\nimport reducer from \"./Context/reducer\";\nimport { weatherContext } from \"./Context/context\";\nimport { firebaseConfig } from \"./FirebaseConfig/config\";\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport SelectCity from \"./Components/SelectCity/SelectCity\";\nimport CityandDate from \"./Components/City&Date/CityandDate\";\nimport WeatherData from \"./Components/WeatherConditions/WeatherData\";\nimport { GET_DATA } from \"./Context/actionTypes\";\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\nimport { store } from \"./Redux/store\";\nimport { getCities } from \"./Redux/Api/ApiTypes\";\n\nfirebase.initializeApp(firebaseConfig);\n\nfunction App() {\n  const dispatch = useDispatch();\n  // const initialState = {\n  //   Cities: [],\n  //   city: \"null\",\n  //   description: \" \",\n  //   icon: \" \",\n  //   temp: \" \",\n  //   tempMin: \" \",\n  //   tempMax: \" \",\n  //   humidity: \" \",\n  //   pressure: \" \",\n  //   wind: \" \",\n  // };\n  console.log();\n\n  const getData = () => {\n    console.log(\"GET CITITESS\");\n    try {\n      firebase\n        .database()\n        .ref(`/Cities`)\n        .on(\"value\", (snapshot) => {\n          dispatch(getCities(snapshot.val()));\n          console.log(\"Get citites Success\");\n        });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useState(() => {\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Container\">\n        <SelectCity></SelectCity>\n        <FetchApi></FetchApi>\n        <div className=\"data\">\n          <CityandDate></CityandDate>\n          <WeatherData></WeatherData>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyBvq_bbMMmpfekSTvctI3b4WvEzPYbOY8g\",\n  authDomain: \"weatherforecast-f0104.firebaseapp.com\",\n  databaseURL: \"https://weatherforecast-f0104.firebaseio.com\",\n  projectId: \"weatherforecast-f0104\",\n  storageBucket: \"weatherforecast-f0104.appspot.com\",\n  messagingSenderId: \"705027654240\",\n  appId: \"1:705027654240:web:fe5ebd27d5bfc69bdaf905\",\n  measurementId: \"G-65P9SQH9JP\",\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Redux/store\";\n\nReactDOM.hydrate(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"top\":\"SelectCity_top__344vZ\",\"head\":\"SelectCity_head__1Zvhd\",\"selectCity\":\"SelectCity_selectCity__aJUWL\"};"],"sourceRoot":""}